// Code generated by go generate; DO NOT EDIT.
// This file was generated by github.com/hunterlong/postman on
// 2019-01-05 14:24:17.415926 -0800 PST m=+0.000365736
//
// This contains Go HTTP testing rendered from a postman JSON export

package main

import (
	"github.com/stretchr/testify/assert"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

// HTTPTest contains all the parameters for a HTTP Unit Test
type HTTPTest struct {
	Name             string
	URL              string
	Method           string
	Body             string
	ExpectedStatus   int
	ExpectedContains []string
}

// RunHTTPTest accepts a HTTPTest type to execute the HTTP request
func RunHTTPTest(test HTTPTest) (*http.Response, error) {
	req, err := http.NewRequest(test.Method, test.URL, strings.NewReader(test.Body))
	if err != nil {
		return nil, err
	}
	rr := httptest.NewRecorder()
	router().ServeHTTP(rr, req)
	return rr.Result(), err
}

// TestPostmanGetRequests runs all the Postman tests within the Get Requests group.
func TestPostmanGetRequests(t *testing.T) {

	tests := []HTTPTest{
		{
			Name:             "Get Tester",
			URL:              "http://localhost:8080/get",
			Method:           "GET",
			Body:             "",
			ExpectedStatus:   200,
			ExpectedContains: nil,
		}}

	for _, v := range tests {
		t.Run(v.Name, func(t *testing.T) {
			run, err := RunHTTPTest(v)
			assert.Nil(t, err)
			body, err := ioutil.ReadAll(run.Body)
			assert.Nil(t, err)
			assert.Equal(t, v.ExpectedStatus, run.StatusCode)
			if v.ExpectedContains != nil {
				stringBody := string(body)
				for _, c := range v.ExpectedContains {
					assert.Contains(t, stringBody, c)
				}
			}
			t.Logf("Test %v got: %v\n", v.Name, string(body))
		})
	}

}

// TestPostmanPostRequests runs all the Postman tests within the Post Requests group.
func TestPostmanPostRequests(t *testing.T) {

	tests := []HTTPTest{
		{
			Name:             "Post Tester",
			URL:              "http://localhost:8080/post",
			Method:           "POST",
			Body:             "",
			ExpectedStatus:   200,
			ExpectedContains: nil,
		}}

	for _, v := range tests {
		t.Run(v.Name, func(t *testing.T) {
			run, err := RunHTTPTest(v)
			assert.Nil(t, err)
			body, err := ioutil.ReadAll(run.Body)
			assert.Nil(t, err)
			assert.Equal(t, v.ExpectedStatus, run.StatusCode)
			if v.ExpectedContains != nil {
				stringBody := string(body)
				for _, c := range v.ExpectedContains {
					assert.Contains(t, stringBody, c)
				}
			}
			t.Logf("Test %v got: %v\n", v.Name, string(body))
		})
	}

}
